<% else %><%# @bookinfo is nil %>

  <% unless @stores.nil? %>
    <div class="stores">
    <h3 class="desch3">Where to Buy</h3>
      <table class="price_list">
        <% @stores.each do |store, data|  
           i = 0
        %>
        <% unless data[i].price == nil %>
         <tr>
              <td>
                  <span style="font-family:rupee">R</span> <%= data[i].price %>
              </td>
               <td>
                  <%= data[i].author %>
              </td>
               <td>
                   <%= data[i].name %>
              </td>
              <td>
              <ul class="tag_dummy">
        	<li><a href="#">LOWEST PRICE</a></li>
              </ul>
            </td>
          </tr>
         <% 
            i =i+1
            end 
         %> 
        <% end %>
      </table>
      <br />
    </div>
  <% else %>
    <div id="loader">
    <img src='images/ajax-loader.gif' />
    <p>
    <strong>Fetching prices from <%= @prices.number_of_stores %> online stores... please be patient!</strong> (This page will be automatically refreshed, please do NOT manually refresh)
    </p>
    <div>
    <% content_for :js do %>
      $( function() {
      setTimeout("location.reload(true)", 30 * 1000);
      });
    <% end %>
  <% end %>

  <% unless @stores.nil? %>
          <div class="stores">
          <h3 class="desch3">Where to Buy</h3>
            <table class="price_list">
              <% @stores.each do |store, data|  %>
              <% unless data[:price] == @not_available %>
               <tr>
                  <td>
                    <a rel="nofollow" href="<%= data[:url] %>"><%= store %></a>
                  </td>
                    <td> 
                        <span class="price" style="font-family:rupee">R</span> <%= data[:price] %>
                    </td>
                  <td>
                    <ul class="tag_dummy">
                      <li><a href="#">LOWEST</a></li>
                    </ul>
                  </td>
                </tr>
               <% end %> 
              <% end %>
            </table>
            <br />
          </div>
  <% else %>
          <div id="loader">
          <img src='images/ajax-loader.gif' />
          <p>
          <strong>Fetching prices from <%= @prices.number_of_stores %> online stores... please be patient!</strong> (This page will be automatically refreshed, please do NOT manually refresh)
          </p>
          </div>
          <% content_for :js do %>
            $( function() {
            setTimeout("location.reload(true)", 30 * 1000);
            });
          <% end %>
  <% end %>

<% unless @bookinfo.nil? %>
  <% content_for :title do %>Search for the best prices in India for the book <%= @bookinfo[:title] %> by <%= @bookinfo[:authors_as_string] %><% end %>
  <% content_for :header do %>
    <div id="book_att_container">
      <% unless @bookinfo[:image].nil? %>
        <div id="img_div">
        <a href="<%= @bookinfo[:detail_page] %>"><img src="<%= @bookinfo[:image] %>" width="140" height="167" alt="<%= @bookinfo[:title] %>" /></a>
        </div>
      <% end %>
     
      <table class="book_attributes">
        <tr>
          <td>Book:</td>
          <td class="big"><%= @bookinfo[:title] %></td>
        </tr>
        <tr>
          <td>By:</td>
          <td class="big"><%= @bookinfo[:authors_as_string] %></td>
        </tr>
        <tr>
          <td>Publisher:</td>
          <td class="big"><%= @bookinfo[:publisher] %></td>
        </tr>
        <tr>
          <td>ISBN:</td>
          <td class="big"><%= @isbn %></td>
        </tr>
        <tr>
          <td>Language:</td>
          <td class="big"><%= @bookinfo[:language] %></td>
        </tr>
        <tr>
          <td>Publishing Date:</td>
          <td class="big"><%= @bookinfo[:published_at] %></td>
        </tr>
      </table>
    </div>
  <% end %>

  <% unless @bookinfo[:rating].nil? %>
    <div>
      Average Customer Rating at <a href="<%= @bookinfo[:detail_page] %>"><%= @bookinfo[:info_source].capitalize %></a> : <%= @bookinfo[:rating] %> out of 5
    </div>
  <% end %>

  <% unless @bookinfo[:review_source].nil? %>
    <div id="editorial_review">
      <h3 class="desch3"><%= @bookinfo[:review_source] %></h3>
      <%= @bookinfo[:review_content].html_safe %>
    </div>
  <% end %>

  <div class="goodreads">
    gt<h3 class="desch3">Reviews</h3>
    <script type="text/javascript" charset="utf-8" src="http://www.goodreads.com/api/reviews_widget?did=DEVELOPER_ID&isbn=<%= @isbn %>&min_length=100&num_reviews=10"></script>
  </div>

  <% unless @bookseer.nil? %>
    <h2>What to read next?</h2>
    <a rel="nofollow" href="<%= @bookseer %>">Consult the Bookseer</a>
  <% end %>


<%else %>
 

===============================================

    def old_find_weight(source_string, search_string)
        #@@logger.info("-----------------------------Finding weight----------------------------------")
        weight,cost=0,0
        search_string = de_canonicalize_isbn(search_string)
        #@@logger.info(source_string)
        #@@logger.info(search_string)
 
        search_string.downcase.split.each do |t|
          cost = cost + 1
          if(source_string.downcase.include? t) then
                  weight = weight + 1
          end
        end
        #@@logger.info(weight)
        #@@logger.info(cost)
        return weight,cost
    end
    #---------------Weight using SOUNDEX implementation----------------------------------------------------------------
     def find_w(source_string, search_string)
        #@@logger.info("-----------------------------Finding weight----------------------------------")
        weight,cost=0,0
	search_string = de_canonicalize_isbn(search_string)
        #@@logger.info(source_string)
        #@@logger.info(search_string)
	#Find word frequency in the source string
	freqs=Hash.new(0)
	#source_string.downcase.split.each { |word| freqs[word] += 1 }
	#freqs.sort_by {|x,y| y }.reverse.each {|w, f| puts w+' '+f.to_s} 
        soundex_source = soundex(source_string.downcase)
        soundex_target = soundex(search_string.downcase)

        if soundex_source[0] == soundex_target[0] then
          weight =1
        end

        for xx in 1..soundex_source.length do
          if soundex_source[xx] == soundex_target[xx] then
              weight = weight + 5;
          end
        end
 
        #Start with small search string   
        search_string.downcase.split.each do |t|
          cost = cost + 1
	  source_string.downcase.split.each do |tt|
	          if(soundex(tt) == soundex(t)) then
        	          weight = weight + 1
			  freqs[t] += 1
	          end
          end 
        end
        #freqs.sort_by {|x,y| y }.reverse.each {|w, f| #@@logger.info (w+' '+f.to_s)} 
        #@@logger.info(weight)
	#@@logger.info(cost)
        #@@logger.info("-----------------")
	#reduce weight if there are duplicates
	freqs.each do |k,v|
		weight = weight - (v-1)
	end


        #@@logger.info(weight)
        return weight,cost
    end

          def find_weight(source_string, search_string)
            #@@logger.info("---------Weight--------------")
            #@@logger.info (source_string)
            #p search_string
            # Assign 10 as weight for perfect word matches
            word_match_w = 10
            weight,cost =0,0
            freqs = Hash.new(0)
            filtered_source_string = ""
            # Check if all the words in search string are present in the target
            #Start with small search string   
            search_string.downcase.split.each do |t|
              cost = cost + 1
              source_string.downcase.split.each do |tt|
                      if(soundex(tt) == soundex(t)) then
                              weight = weight + word_match_w
                              freqs[t] += 1
                              filtered_source_string << tt 
                      end
              end 
            end
            #p 'after adding characters', weight
            #p filtered_source_string
              #reduce weight if there are duplicates
            #  freqs.each do |k,v|
            #          p k , v
            #          weight = weight - (v*word_match_w)
            #  end
            #p 'after removing duplicates' , weight
                  soundex_source = soundex(source_string.downcase)
                  soundex_target = soundex(search_string.downcase)
                  if soundex_source[0] == soundex_target[0] then
                          for xx in 1..soundex_source.length do
                            if soundex_source[xx] == soundex_target[xx] then
                                weight = weight + 1
                            end
                          end
                  end 
            #Match filtered source string on soundex
            if soundex(search_string.gsub(" ","")) == soundex(filtered_source_string) then
              weight += 5
            end
            #@@logger.info("-----------------------")
            #@@logger.info(weight)
            return weight, cost

          end

